// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package finetuning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FineTuningServiceClient is the client API for FineTuningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FineTuningServiceClient interface {
	// Create a new project if it does not exist, and runs it
	CreateFineTuningJob(ctx context.Context, in *CreateFineTuningJobRequest, opts ...grpc.CallOption) (*CreateFineTuningJobResponse, error)
	// Get a FineTuningJob by id
	GetFineTuningJobById(ctx context.Context, in *GetFineTuningJobByIdRequest, opts ...grpc.CallOption) (*GetFineTuningJobByIdResponse, error)
	// Update a FineTuningJob by id
	UpdateFineTuningJob(ctx context.Context, in *UpdateFineTuningJobRequest, opts ...grpc.CallOption) (*UpdateFineTuningJobResponse, error)
	// Delete a FineTuningJob by id
	DeleteFineTuningJob(ctx context.Context, in *DeleteFineTuningJobRequest, opts ...grpc.CallOption) (*DeleteFineTuningJobResponse, error)
	// Check the progress of a FineTuningJob by id
	GetFineTuningJobStatus(ctx context.Context, in *GetFineTuningJobStatusRequest, opts ...grpc.CallOption) (*GetFineTuningJobStatusResponse, error)
	// Re-run training API call, does not create a new job in the DB
	ResubmitFineTuningJob(ctx context.Context, in *ResubmitFineTuningJobRequest, opts ...grpc.CallOption) (*ResubmitFineTuningJobResponse, error)
	// Get a list of FineTuningJobs by user id
	GetJobsByUserId(ctx context.Context, in *GetJobsByUserIdRequest, opts ...grpc.CallOption) (*GetJobsByUserIdResponse, error)
	// Get a list of FineTuningJobs by org id
	GetJobsByOrgId(ctx context.Context, in *GetJobsByOrgIdRequest, opts ...grpc.CallOption) (*GetJobsByOrgIdResponse, error)
}

type fineTuningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFineTuningServiceClient(cc grpc.ClientConnInterface) FineTuningServiceClient {
	return &fineTuningServiceClient{cc}
}

func (c *fineTuningServiceClient) CreateFineTuningJob(ctx context.Context, in *CreateFineTuningJobRequest, opts ...grpc.CallOption) (*CreateFineTuningJobResponse, error) {
	out := new(CreateFineTuningJobResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/CreateFineTuningJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetFineTuningJobById(ctx context.Context, in *GetFineTuningJobByIdRequest, opts ...grpc.CallOption) (*GetFineTuningJobByIdResponse, error) {
	out := new(GetFineTuningJobByIdResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetFineTuningJobById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) UpdateFineTuningJob(ctx context.Context, in *UpdateFineTuningJobRequest, opts ...grpc.CallOption) (*UpdateFineTuningJobResponse, error) {
	out := new(UpdateFineTuningJobResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/UpdateFineTuningJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) DeleteFineTuningJob(ctx context.Context, in *DeleteFineTuningJobRequest, opts ...grpc.CallOption) (*DeleteFineTuningJobResponse, error) {
	out := new(DeleteFineTuningJobResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/DeleteFineTuningJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetFineTuningJobStatus(ctx context.Context, in *GetFineTuningJobStatusRequest, opts ...grpc.CallOption) (*GetFineTuningJobStatusResponse, error) {
	out := new(GetFineTuningJobStatusResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetFineTuningJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) ResubmitFineTuningJob(ctx context.Context, in *ResubmitFineTuningJobRequest, opts ...grpc.CallOption) (*ResubmitFineTuningJobResponse, error) {
	out := new(ResubmitFineTuningJobResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/ResubmitFineTuningJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetJobsByUserId(ctx context.Context, in *GetJobsByUserIdRequest, opts ...grpc.CallOption) (*GetJobsByUserIdResponse, error) {
	out := new(GetJobsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetJobsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetJobsByOrgId(ctx context.Context, in *GetJobsByOrgIdRequest, opts ...grpc.CallOption) (*GetJobsByOrgIdResponse, error) {
	out := new(GetJobsByOrgIdResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetJobsByOrgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FineTuningServiceServer is the server API for FineTuningService service.
// All implementations must embed UnimplementedFineTuningServiceServer
// for forward compatibility
type FineTuningServiceServer interface {
	// Create a new project if it does not exist, and runs it
	CreateFineTuningJob(context.Context, *CreateFineTuningJobRequest) (*CreateFineTuningJobResponse, error)
	// Get a FineTuningJob by id
	GetFineTuningJobById(context.Context, *GetFineTuningJobByIdRequest) (*GetFineTuningJobByIdResponse, error)
	// Update a FineTuningJob by id
	UpdateFineTuningJob(context.Context, *UpdateFineTuningJobRequest) (*UpdateFineTuningJobResponse, error)
	// Delete a FineTuningJob by id
	DeleteFineTuningJob(context.Context, *DeleteFineTuningJobRequest) (*DeleteFineTuningJobResponse, error)
	// Check the progress of a FineTuningJob by id
	GetFineTuningJobStatus(context.Context, *GetFineTuningJobStatusRequest) (*GetFineTuningJobStatusResponse, error)
	// Re-run training API call, does not create a new job in the DB
	ResubmitFineTuningJob(context.Context, *ResubmitFineTuningJobRequest) (*ResubmitFineTuningJobResponse, error)
	// Get a list of FineTuningJobs by user id
	GetJobsByUserId(context.Context, *GetJobsByUserIdRequest) (*GetJobsByUserIdResponse, error)
	// Get a list of FineTuningJobs by org id
	GetJobsByOrgId(context.Context, *GetJobsByOrgIdRequest) (*GetJobsByOrgIdResponse, error)
	mustEmbedUnimplementedFineTuningServiceServer()
}

// UnimplementedFineTuningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFineTuningServiceServer struct {
}

func (UnimplementedFineTuningServiceServer) CreateFineTuningJob(context.Context, *CreateFineTuningJobRequest) (*CreateFineTuningJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFineTuningJob not implemented")
}
func (UnimplementedFineTuningServiceServer) GetFineTuningJobById(context.Context, *GetFineTuningJobByIdRequest) (*GetFineTuningJobByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineTuningJobById not implemented")
}
func (UnimplementedFineTuningServiceServer) UpdateFineTuningJob(context.Context, *UpdateFineTuningJobRequest) (*UpdateFineTuningJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFineTuningJob not implemented")
}
func (UnimplementedFineTuningServiceServer) DeleteFineTuningJob(context.Context, *DeleteFineTuningJobRequest) (*DeleteFineTuningJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFineTuningJob not implemented")
}
func (UnimplementedFineTuningServiceServer) GetFineTuningJobStatus(context.Context, *GetFineTuningJobStatusRequest) (*GetFineTuningJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineTuningJobStatus not implemented")
}
func (UnimplementedFineTuningServiceServer) ResubmitFineTuningJob(context.Context, *ResubmitFineTuningJobRequest) (*ResubmitFineTuningJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResubmitFineTuningJob not implemented")
}
func (UnimplementedFineTuningServiceServer) GetJobsByUserId(context.Context, *GetJobsByUserIdRequest) (*GetJobsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobsByUserId not implemented")
}
func (UnimplementedFineTuningServiceServer) GetJobsByOrgId(context.Context, *GetJobsByOrgIdRequest) (*GetJobsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobsByOrgId not implemented")
}
func (UnimplementedFineTuningServiceServer) mustEmbedUnimplementedFineTuningServiceServer() {}

// UnsafeFineTuningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FineTuningServiceServer will
// result in compilation errors.
type UnsafeFineTuningServiceServer interface {
	mustEmbedUnimplementedFineTuningServiceServer()
}

func RegisterFineTuningServiceServer(s grpc.ServiceRegistrar, srv FineTuningServiceServer) {
	s.RegisterService(&FineTuningService_ServiceDesc, srv)
}

func _FineTuningService_CreateFineTuningJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFineTuningJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).CreateFineTuningJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/CreateFineTuningJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).CreateFineTuningJob(ctx, req.(*CreateFineTuningJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetFineTuningJobById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineTuningJobByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetFineTuningJobById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetFineTuningJobById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetFineTuningJobById(ctx, req.(*GetFineTuningJobByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_UpdateFineTuningJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFineTuningJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).UpdateFineTuningJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/UpdateFineTuningJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).UpdateFineTuningJob(ctx, req.(*UpdateFineTuningJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_DeleteFineTuningJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFineTuningJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).DeleteFineTuningJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/DeleteFineTuningJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).DeleteFineTuningJob(ctx, req.(*DeleteFineTuningJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetFineTuningJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineTuningJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetFineTuningJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetFineTuningJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetFineTuningJobStatus(ctx, req.(*GetFineTuningJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_ResubmitFineTuningJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResubmitFineTuningJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).ResubmitFineTuningJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/ResubmitFineTuningJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).ResubmitFineTuningJob(ctx, req.(*ResubmitFineTuningJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetJobsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetJobsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetJobsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetJobsByUserId(ctx, req.(*GetJobsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetJobsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetJobsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetJobsByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetJobsByOrgId(ctx, req.(*GetJobsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FineTuningService_ServiceDesc is the grpc.ServiceDesc for FineTuningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FineTuningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gooseai.FineTuningService",
	HandlerType: (*FineTuningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFineTuningJob",
			Handler:    _FineTuningService_CreateFineTuningJob_Handler,
		},
		{
			MethodName: "GetFineTuningJobById",
			Handler:    _FineTuningService_GetFineTuningJobById_Handler,
		},
		{
			MethodName: "UpdateFineTuningJob",
			Handler:    _FineTuningService_UpdateFineTuningJob_Handler,
		},
		{
			MethodName: "DeleteFineTuningJob",
			Handler:    _FineTuningService_DeleteFineTuningJob_Handler,
		},
		{
			MethodName: "GetFineTuningJobStatus",
			Handler:    _FineTuningService_GetFineTuningJobStatus_Handler,
		},
		{
			MethodName: "ResubmitFineTuningJob",
			Handler:    _FineTuningService_ResubmitFineTuningJob_Handler,
		},
		{
			MethodName: "GetJobsByUserId",
			Handler:    _FineTuningService_GetJobsByUserId_Handler,
		},
		{
			MethodName: "GetJobsByOrgId",
			Handler:    _FineTuningService_GetJobsByOrgId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finetuning.proto",
}
