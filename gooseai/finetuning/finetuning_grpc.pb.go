// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package finetuning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FineTuningServiceClient is the client API for FineTuningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FineTuningServiceClient interface {
	// Create a new project if it does not exist, and runs it
	CreateFineTuningModel(ctx context.Context, in *CreateFineTuningModelRequest, opts ...grpc.CallOption) (*CreateFineTuningModelResponse, error)
	// Get a FineTuningModel by id
	GetFineTuningModelById(ctx context.Context, in *GetFineTuningModelByIdRequest, opts ...grpc.CallOption) (*GetFineTuningModelByIdResponse, error)
	// Update a FineTuningModel by id
	UpdateFineTuningModel(ctx context.Context, in *UpdateFineTuningModelRequest, opts ...grpc.CallOption) (*UpdateFineTuningModelResponse, error)
	// Delete a FineTuningModel by id
	DeleteFineTuningModel(ctx context.Context, in *DeleteFineTuningModelRequest, opts ...grpc.CallOption) (*DeleteFineTuningModelResponse, error)
	// Check the progress of a FineTuningModel by id
	GetFineTuningModelStatus(ctx context.Context, in *GetFineTuningModelStatusRequest, opts ...grpc.CallOption) (*GetFineTuningModelStatusResponse, error)
	// Re-run training API call, does not create a new model in the DB
	ResubmitFineTuningModel(ctx context.Context, in *ResubmitFineTuningModelRequest, opts ...grpc.CallOption) (*ResubmitFineTuningModelResponse, error)
	// Get a list of FineTuningModels by user id
	GetFineTuningModelsByUserId(ctx context.Context, in *GetFineTuningModelsByUserIdRequest, opts ...grpc.CallOption) (*GetFineTuningModelsByUserIdResponse, error)
	// Get a list of FineTuningModels by org id
	GetFineTuningModelsByOrgId(ctx context.Context, in *GetFineTuningModelsByOrgIdRequest, opts ...grpc.CallOption) (*GetFineTuningModelsByOrgIdResponse, error)
}

type fineTuningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFineTuningServiceClient(cc grpc.ClientConnInterface) FineTuningServiceClient {
	return &fineTuningServiceClient{cc}
}

func (c *fineTuningServiceClient) CreateFineTuningModel(ctx context.Context, in *CreateFineTuningModelRequest, opts ...grpc.CallOption) (*CreateFineTuningModelResponse, error) {
	out := new(CreateFineTuningModelResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/CreateFineTuningModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetFineTuningModelById(ctx context.Context, in *GetFineTuningModelByIdRequest, opts ...grpc.CallOption) (*GetFineTuningModelByIdResponse, error) {
	out := new(GetFineTuningModelByIdResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetFineTuningModelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) UpdateFineTuningModel(ctx context.Context, in *UpdateFineTuningModelRequest, opts ...grpc.CallOption) (*UpdateFineTuningModelResponse, error) {
	out := new(UpdateFineTuningModelResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/UpdateFineTuningModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) DeleteFineTuningModel(ctx context.Context, in *DeleteFineTuningModelRequest, opts ...grpc.CallOption) (*DeleteFineTuningModelResponse, error) {
	out := new(DeleteFineTuningModelResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/DeleteFineTuningModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetFineTuningModelStatus(ctx context.Context, in *GetFineTuningModelStatusRequest, opts ...grpc.CallOption) (*GetFineTuningModelStatusResponse, error) {
	out := new(GetFineTuningModelStatusResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetFineTuningModelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) ResubmitFineTuningModel(ctx context.Context, in *ResubmitFineTuningModelRequest, opts ...grpc.CallOption) (*ResubmitFineTuningModelResponse, error) {
	out := new(ResubmitFineTuningModelResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/ResubmitFineTuningModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetFineTuningModelsByUserId(ctx context.Context, in *GetFineTuningModelsByUserIdRequest, opts ...grpc.CallOption) (*GetFineTuningModelsByUserIdResponse, error) {
	out := new(GetFineTuningModelsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetFineTuningModelsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineTuningServiceClient) GetFineTuningModelsByOrgId(ctx context.Context, in *GetFineTuningModelsByOrgIdRequest, opts ...grpc.CallOption) (*GetFineTuningModelsByOrgIdResponse, error) {
	out := new(GetFineTuningModelsByOrgIdResponse)
	err := c.cc.Invoke(ctx, "/gooseai.FineTuningService/GetFineTuningModelsByOrgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FineTuningServiceServer is the server API for FineTuningService service.
// All implementations must embed UnimplementedFineTuningServiceServer
// for forward compatibility
type FineTuningServiceServer interface {
	// Create a new project if it does not exist, and runs it
	CreateFineTuningModel(context.Context, *CreateFineTuningModelRequest) (*CreateFineTuningModelResponse, error)
	// Get a FineTuningModel by id
	GetFineTuningModelById(context.Context, *GetFineTuningModelByIdRequest) (*GetFineTuningModelByIdResponse, error)
	// Update a FineTuningModel by id
	UpdateFineTuningModel(context.Context, *UpdateFineTuningModelRequest) (*UpdateFineTuningModelResponse, error)
	// Delete a FineTuningModel by id
	DeleteFineTuningModel(context.Context, *DeleteFineTuningModelRequest) (*DeleteFineTuningModelResponse, error)
	// Check the progress of a FineTuningModel by id
	GetFineTuningModelStatus(context.Context, *GetFineTuningModelStatusRequest) (*GetFineTuningModelStatusResponse, error)
	// Re-run training API call, does not create a new model in the DB
	ResubmitFineTuningModel(context.Context, *ResubmitFineTuningModelRequest) (*ResubmitFineTuningModelResponse, error)
	// Get a list of FineTuningModels by user id
	GetFineTuningModelsByUserId(context.Context, *GetFineTuningModelsByUserIdRequest) (*GetFineTuningModelsByUserIdResponse, error)
	// Get a list of FineTuningModels by org id
	GetFineTuningModelsByOrgId(context.Context, *GetFineTuningModelsByOrgIdRequest) (*GetFineTuningModelsByOrgIdResponse, error)
	mustEmbedUnimplementedFineTuningServiceServer()
}

// UnimplementedFineTuningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFineTuningServiceServer struct {
}

func (UnimplementedFineTuningServiceServer) CreateFineTuningModel(context.Context, *CreateFineTuningModelRequest) (*CreateFineTuningModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFineTuningModel not implemented")
}
func (UnimplementedFineTuningServiceServer) GetFineTuningModelById(context.Context, *GetFineTuningModelByIdRequest) (*GetFineTuningModelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineTuningModelById not implemented")
}
func (UnimplementedFineTuningServiceServer) UpdateFineTuningModel(context.Context, *UpdateFineTuningModelRequest) (*UpdateFineTuningModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFineTuningModel not implemented")
}
func (UnimplementedFineTuningServiceServer) DeleteFineTuningModel(context.Context, *DeleteFineTuningModelRequest) (*DeleteFineTuningModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFineTuningModel not implemented")
}
func (UnimplementedFineTuningServiceServer) GetFineTuningModelStatus(context.Context, *GetFineTuningModelStatusRequest) (*GetFineTuningModelStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineTuningModelStatus not implemented")
}
func (UnimplementedFineTuningServiceServer) ResubmitFineTuningModel(context.Context, *ResubmitFineTuningModelRequest) (*ResubmitFineTuningModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResubmitFineTuningModel not implemented")
}
func (UnimplementedFineTuningServiceServer) GetFineTuningModelsByUserId(context.Context, *GetFineTuningModelsByUserIdRequest) (*GetFineTuningModelsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineTuningModelsByUserId not implemented")
}
func (UnimplementedFineTuningServiceServer) GetFineTuningModelsByOrgId(context.Context, *GetFineTuningModelsByOrgIdRequest) (*GetFineTuningModelsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineTuningModelsByOrgId not implemented")
}
func (UnimplementedFineTuningServiceServer) mustEmbedUnimplementedFineTuningServiceServer() {}

// UnsafeFineTuningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FineTuningServiceServer will
// result in compilation errors.
type UnsafeFineTuningServiceServer interface {
	mustEmbedUnimplementedFineTuningServiceServer()
}

func RegisterFineTuningServiceServer(s grpc.ServiceRegistrar, srv FineTuningServiceServer) {
	s.RegisterService(&FineTuningService_ServiceDesc, srv)
}

func _FineTuningService_CreateFineTuningModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFineTuningModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).CreateFineTuningModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/CreateFineTuningModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).CreateFineTuningModel(ctx, req.(*CreateFineTuningModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetFineTuningModelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineTuningModelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetFineTuningModelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetFineTuningModelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetFineTuningModelById(ctx, req.(*GetFineTuningModelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_UpdateFineTuningModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFineTuningModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).UpdateFineTuningModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/UpdateFineTuningModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).UpdateFineTuningModel(ctx, req.(*UpdateFineTuningModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_DeleteFineTuningModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFineTuningModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).DeleteFineTuningModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/DeleteFineTuningModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).DeleteFineTuningModel(ctx, req.(*DeleteFineTuningModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetFineTuningModelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineTuningModelStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetFineTuningModelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetFineTuningModelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetFineTuningModelStatus(ctx, req.(*GetFineTuningModelStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_ResubmitFineTuningModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResubmitFineTuningModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).ResubmitFineTuningModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/ResubmitFineTuningModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).ResubmitFineTuningModel(ctx, req.(*ResubmitFineTuningModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetFineTuningModelsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineTuningModelsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetFineTuningModelsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetFineTuningModelsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetFineTuningModelsByUserId(ctx, req.(*GetFineTuningModelsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineTuningService_GetFineTuningModelsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineTuningModelsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineTuningServiceServer).GetFineTuningModelsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.FineTuningService/GetFineTuningModelsByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineTuningServiceServer).GetFineTuningModelsByOrgId(ctx, req.(*GetFineTuningModelsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FineTuningService_ServiceDesc is the grpc.ServiceDesc for FineTuningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FineTuningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gooseai.FineTuningService",
	HandlerType: (*FineTuningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFineTuningModel",
			Handler:    _FineTuningService_CreateFineTuningModel_Handler,
		},
		{
			MethodName: "GetFineTuningModelById",
			Handler:    _FineTuningService_GetFineTuningModelById_Handler,
		},
		{
			MethodName: "UpdateFineTuningModel",
			Handler:    _FineTuningService_UpdateFineTuningModel_Handler,
		},
		{
			MethodName: "DeleteFineTuningModel",
			Handler:    _FineTuningService_DeleteFineTuningModel_Handler,
		},
		{
			MethodName: "GetFineTuningModelStatus",
			Handler:    _FineTuningService_GetFineTuningModelStatus_Handler,
		},
		{
			MethodName: "ResubmitFineTuningModel",
			Handler:    _FineTuningService_ResubmitFineTuningModel_Handler,
		},
		{
			MethodName: "GetFineTuningModelsByUserId",
			Handler:    _FineTuningService_GetFineTuningModelsByUserId_Handler,
		},
		{
			MethodName: "GetFineTuningModelsByOrgId",
			Handler:    _FineTuningService_GetFineTuningModelsByOrgId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finetuning.proto",
}
